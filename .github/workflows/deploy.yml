name: CI/CD Pipeline for OpenTelemetry Demo

on:
  push:
    branches:
      - main2
  pull_request:
    branches:
      - main2
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { name: accountingservice, path: src/accountingservice/Dockerfile }
          - { name: adservice, path: ./src/adservice/Dockerfile }
          - { name: cartservice, path: ./src/cartservice/Dockerfile }
          - { name: checkoutservice, path: ./src/checkoutservice/Dockerfile }
          - { name: currencyservice, path: ./src/currencyservice/Dockerfile }
          - { name: emailservice, path: ./src/emailservice/Dockerfile }
          - { name: frauddetectionservice, path: ./src/frauddetectionservice/Dockerfile }
          - { name: frontend, path: ./src/frontend/Dockerfile }
          - { name: paymentservice, path: ./src/paymentservice/Dockerfile }
          - { name: productcatalogservice, path: ./src/productcatalogservice/Dockerfile }
          - { name: shippingservice, path: ./src/shippingservice/Dockerfile }
          # Add additional services here
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate with Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPO_URI=283565981308.dkr.ecr.us-east-1.amazonaws.com/otel-demo
          SERVICE_NAME=${{ matrix.service.name }}
          SERVICE_PATH=${{ matrix.service.path }}
          
          echo "Building image for $SERVICE_NAME from $SERVICE_PATH"
          
          # Build the Docker image
          docker build -t $REPO_URI/$SERVICE_NAME:$IMAGE_TAG $SERVICE_PATH
          
          # Push the Docker image to ECR
          docker push $REPO_URI/$SERVICE_NAME:$IMAGE_TAG
          
          echo "::set-output name=tag::$IMAGE_TAG"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate with Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name otel-demo-cluster

      - name: Update Kubernetes Manifests and Deploy
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|283565981308.dkr.ecr.us-east-1.amazonaws.com/otel-demo/service-name:1.0.0|g" opentelemtry-demo.yaml
          kubectl apply -f opentelemtry-demo.yaml -n otel-demo --validate=false

      - name: Verify Deployment
        run: |
          kubectl get pods

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    steps:
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Set up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name otel-demo-cluster

      - name: Rollback to previous stable version
        run: |
          kubectl rollout undo deployment/otel-demo-paymentservice
