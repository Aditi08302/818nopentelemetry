name: CI/CD Pipeline for OpenTelemetry Demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_SHA: ${{ github.sha }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Add your AWS Access Key in GitHub Secrets
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Add your AWS Secret Access Key in GitHub Secrets
        aws-region: us-east-1 # Replace with your AWS region (e.g., us-west-2)

    - name: Authenticate with Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Tag Docker Images
      run: |
        export IMAGE_NAME=283565981308.dkr.ecr.us-east-1.amazonaws.com/otel-demo # Replace <your_account_id> with your AWS Account ID, <aws-region> with your AWS region, and <your_repository_name> with your ECR repository name
        export TAG=${{ github.sha }}
        docker build -t $IMAGE_NAME:$TAG .
        docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest

    - name: Push Docker Image to ECR
      run: |
        docker push $IMAGE_NAME:$TAG
        docker push $IMAGE_NAME:latest

  run_tests:
    runs-on: ubuntu-latest
    name: "Run Tests"
    needs: build  # Ensure tests run after build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trace Testing
        run: |
          make build && docker system prune -f && make run-tracetesting

  deploy:
    runs-on: ubuntu-latest
    needs: run_tests  # Deploy only if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} # Ensure the correct AWS Access Key is set in GitHub Secrets
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Ensure the correct AWS Secret Key is set in GitHub Secrets
          aws configure set default.region us-east-1 # Replace with your AWS region (e.g., us-west-2)

      - name: Set up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name otel-demo-cluster # Replace otel-demo-cluster with the name of your EKS cluster
          
      - name: Download deployment.yaml from GitHub
        run: |
          curl -o deployment.yaml https://raw.githubusercontent.com/Aditi08302/818nopentelemetry/refs/heads/main/opentelemtry-demo.yaml # Replace with the URL to your deployment YAML file in your repository

      - name: Deploy to EKS
        run: |
          kubectl config current-context
          pwd
          ls
          kubectl get pods
          kubectl apply -f deployment.yaml

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    steps:
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} # Ensure AWS Access Key is configured
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Ensure AWS Secret Key is configured
          aws configure set default.region us-east-1 # Replace with your AWS region
  
      - name: Set up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name otel-demo-cluster # Replace otel-demo-cluster with the name of your EKS cluster
  
      - name: Rollback to previous stable version
        run: |
          kubectl rollout undo deployment/otel-demo # Replace otel-demo-app with your deployment name
