name: CI/CD Pipeline for OpenTelemetry Demo

on:
  push:
    branches:
      - main2
  pull_request:
    branches:
      - main2
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_SHA: ${{ github.sha }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_I }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Authenticate with Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Verify Docker Login
      run: docker info

    - name: Build and Tag Docker Images with Docker Compose
      run: |
        export TAG=${{ github.sha }}
        export IMAGE_NAME=aditi08302/otel-demo
        docker-compose build
        docker-compose push

  run_tests:
    runs-on: ubuntu-latest
    name: "Run Tests"
    needs: build  # Ensure tests run after build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trace Testing
        run: |
          make build && docker system prune -f && make run-tracetesting

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate with Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name otel-demo-cluster

      - name: Update Kubernetes Manifests and Deploy
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|283565981308.dkr.ecr.us-east-1.amazonaws.com/otel-demo/service-name:1.0.0|g" opentelemtry-demo.yaml
          kubectl apply -f opentelemtry-demo.yaml -n otel-demo --validate=false

      - name: Verify Deployment
        run: |
          kubectl get pods

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    steps:
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Set up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name otel-demo-cluster

      - name: Rollback to previous stable version
        run: |
          kubectl rollout undo deployment/otel-demo-cluster
